#!/usr/bin/env bash

# prickly-pete
# 	a simple wrapper script to control the containers that run via this project:
#	https://github.com/philcryer/prickly-pete
# 
# Thanks
# 	this script developed from a well thoughtout template you can find here
# 	https://dev.to/thiht/shell-scripts-matter (thanks http://twitter.com/Thiht)

set -euo pipefail
IFS=$'\n\t'

#/ Usage: prickly-pete [build] [start] [stop] [status]
#/     Options:
#/         build: build all containers
#/         start: build (if needed) and start all containers
#/         stop: stop and remove all containers
#/         status: show the status of all conatainers
#/         help: display this help message

#### define usage dialogue, and call it if we don't have the right num of arguments
usage() { grep '^#/' "$0" | cut -c4- ; exit 0 ; }
expr "$*" : ".*--help" > /dev/null && usage
expr "$*" : ".*help" > /dev/null && usage
if [[ $# -eq 0 ]] ; then
	usage
fi

if [[ $# -gt 1 ]] ; then
	usage
fi

#### check for required software
for cli in docker docker-compose; do
	if ! type "$cli" > /dev/null 2>&1; then
       		echo "FAIL - $cli is not installed and in the PATH. Aborting."
		exit 1
        fi
done

#### create log directory for script and app logs
if [ ! -d 'var' ]; then
	mkdir -p var/dionaea/{wwwroot,binaries,log,bitstreams}
	mkdir -p var/conpot
	mkdir -p var/cowrie/log
	# obviously a bad hack here, let's figure this out later
	chmod -R 777 var/cowrie/log
fi

#### create log files and rules
readonly log_file="var/$(basename "$0").log"
info()    { echo "[INFO]    $@" | tee -a "$log_file" >&2 ; }
warning() { echo "[WARNING] $@" | tee -a "$log_file" >&2 ; }
error()   { echo "[ERROR]   $@" | tee -a "$log_file" >&2 ; }
fatal()   { echo "[FATAL]   $@" | tee -a "$log_file" >&2 ; exit 1 ; }

#### cleanup routinue to be run after script exits
cleanup() {
    # Remove temporary files or Restart services
    #echo "[INFO]    stopping" >> "$log_file"
    printf "%s %s\n" "`date -u`" "prickly-pete: cleanup" >> $log_file
}

#### the script aktion
if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
    trap cleanup EXIT
    
    case "$1" in
        build) 
                printf "%s %s\n" "`date -u`" "prickly-pete: building containers" >> $log_file; 
		docker-compose build ;;

	start) 
                printf "%s %s\n" "`date -u`" "prickly-pete: starting containers" >> $log_file; 
		docker-compose up -d ;;

	stop) 
                printf "%s %s\n" "`date -u`" "prickly-pete: stopping containers" >> $log_file; 
		docker-compose down;
		printf "%s %s\n" "`date -u`" "prickly-pete: exiting" >> $log_file;
		exit 0;;

	status) docker-compose ps  ;;
    esac
fi
